{"version":3,"sources":["node_modules/mock-xmlhttprequest/src/Event.js","node_modules/mock-xmlhttprequest/src/EventTarget.js","node_modules/mock-xmlhttprequest/src/HeadersContainer.js","node_modules/mock-xmlhttprequest/src/Utils.js","node_modules/mock-xmlhttprequest/src/MockXhr.js","node_modules/mock-xmlhttprequest/src/MockXhrServer.js","node_modules/mock-xmlhttprequest/src/Factories.js","node_modules/mock-xmlhttprequest/index.js","index.js"],"names":["Event","type","loaded","total","undefined","lengthComputable","module","exports","flattenUseCaptureFlag","options","capture","EventTarget","eventContext","_eventContext","_eventListeners","events","some","event","callback","useCapture","listener","once","other","push","index","findIndex","splice","listeners","map","filter","includes","forEach","call","handleEvent","HeadersContainer","headers","_headers","Map","Object","keys","key","addHeader","clear","name","value","get","toLowerCase","sort","reduce","result","headerValue","currentValue","set","forbiddenHeaders","forbiddenHeaderRegEx","RegExp","join","isRequestHeaderForbidden","test","isRequestMethodForbidden","method","upperCaseMethods","upperCaseMethodsRegEx","normalizeHTTPMethodName","toUpperCase","statusTexts","getStatusText","status","require","Utils","throwError","text","exception","Error","MockXhr","_readyState","UNSENT","requestHeaders","_withCredentials","_timeout","_upload","_response","_networkErrorResponse","timeoutEnabled","onCreate","url","_terminateRequest","_sendFlag","_uploadListenerFlag","reset","OPENED","_fireReadyStateChange","SyntaxError","trim","body","extractedContentType","contentType","getHeader","hasListeners","_uploadCompleteFlag","_timedOutFlag","_fireEvent","_fireUploadEvent","_getRequestBodySize","_timeoutReference","Date","now","_scheduleRequestTimeout","onSend","setTimeout","HEADERS_RECEIVED","LOADING","_requestErrorSteps","DONE","getAll","transmitted","statusText","setResponseHeaders","setResponseBody","_requestEndOfBody","statusMessage","_processResponse","length","_handleResponseEndOfBody","response","_handleResponseErrors","_isNetworkErrorResponse","size","dispatchEvent","_newEvent","onreadystatechange","_timeoutTask","clearTimeout","delay","Math","max","setRequestTimeout","constructor","_responseType","responseType","JSON","parse","e","MockXhrServer","xhrMock","routes","_requests","_routes","matcher","handler","addHandler","xhr","_handleRequest","xhrFactory","context","global","_savedXMLHttpRequest","XMLHttpRequest","_savedContext","count","_defaultRoute","setDefaultHandler","getHash","route","_findFirstMatchingRoute","Array","isArray","min","respond","find","newMockXhr","LocalMockXhr","args","newServer","Factories","MockXMLHttpRequest","server","Storage","Number","localStorage","getItem","alert","post","setItem","install","document","addEventListener","updateViewsReq","open","send","onload","console","log","getViewsReq","json","views","responseText","getElementById","innerHTML","style","display"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["'use strict';\n\n/**\n * XMLHttpRequest events\n */\nclass Event {\n  /**\n   * @param {string} type event type\n   * @param {number} loaded loaded bytes\n   * @param {number} total total bytes\n   */\n  constructor(type, loaded, total) {\n    this.type = type;\n    this.loaded = loaded !== undefined ? loaded : 0;\n    if (total > 0) {\n      this.total = total;\n      this.lengthComputable = true;\n    } else {\n      this.total = 0;\n      this.lengthComputable = false;\n    }\n  }\n}\n\nmodule.exports = Event;\n","'use strict';\n\nfunction flattenUseCaptureFlag(options) {\n  if (typeof options === 'boolean') {\n    return options;\n  }\n  return !!options.capture;\n}\n\n/**\n * An EventTarget object represents a target to which an event can be dispatched when something has\n * occurred.\n *\n * Based on https://dom.spec.whatwg.org/#interface-eventtarget\n */\nclass EventTarget {\n  /**\n   * Contructor\n   *\n   * @param {?object} eventContext optional \"this\" for event handlers\n   */\n  constructor(eventContext = this) {\n    this._eventContext = eventContext;\n    this._eventListeners = {};\n  }\n\n  /**\n   * @returns {boolean} whether any event listener is registered\n   */\n  hasListeners() {\n    return EventTarget.events.some((event) => {\n      return this._eventListeners[event] || this[`on${event}`];\n    });\n  }\n\n  /**\n   * Add an event listener.\n   * See https://dom.spec.whatwg.org/#dom-eventtarget-addeventlistener\n   *\n   * @param {string} type event type ('load', 'abort', etc)\n   * @param {EventListener|Function} callback listener callback\n   * @param {boolean|object} options options object or the useCapture flag\n   */\n  addEventListener(type, callback, options = false) {\n    if (callback) {\n      const useCapture = flattenUseCaptureFlag(options);\n      const listener = {\n        callback,\n        useCapture,\n        once: !!options.once,\n      };\n\n      this._eventListeners[type] = this._eventListeners[type] || [];\n\n      // If eventTarget’s event listener list does not contain an event listener whose type is\n      // listener’s type, callback is listener’s callback, and capture is listener’s capture, then\n      // append listener to eventTarget’s event listener list.\n      // See https://dom.spec.whatwg.org/#add-an-event-listener\n      if (!this._eventListeners[type].some((other) => {\n        return other.callback === listener.callback && other.useCapture === listener.useCapture;\n      })) {\n        this._eventListeners[type].push(listener);\n      }\n    }\n  }\n\n  /**\n   * Remove an event listener.\n   * See https://dom.spec.whatwg.org/#dom-eventtarget-removeeventlistener\n   *\n   * @param {string} type event type ('load', 'abort', etc)\n   * @param {EventListener|Function} callback listener callback\n   * @param {boolean|object} options options object or the useCapture flag\n   */\n  removeEventListener(type, callback, options = false) {\n    if (this._eventListeners[type]) {\n      const useCapture = flattenUseCaptureFlag(options);\n      const index = this._eventListeners[type].findIndex((listener) => {\n        return callback === listener.callback && useCapture === listener.useCapture;\n      });\n      if (index >= 0) {\n        this._eventListeners[type].splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Calls all the listeners for the event.\n   *\n   * @param {object} event event\n   * @returns {boolean} always true since none of the xhr event are cancelable\n   */\n  dispatchEvent(event) {\n    // Only the event listeners registered at this point should be called. Storing them here avoids\n    // problems with callbacks that add or remove listeners.\n    const listeners = [];\n    if (this._eventListeners[event.type]) {\n      listeners.push(...this._eventListeners[event.type].map(listener => listener.callback));\n\n      // Remove 'once' listeners\n      this._eventListeners[event.type] = this._eventListeners[event.type]\n        .filter(listener => !listener.once);\n    }\n\n    // Handle event listeners added as object properties (e.g. obj.onload = ...)\n    if (EventTarget.events.includes(event.type)) {\n      const listener = this[`on${event.type}`];\n      if (listener) {\n        listeners.push(listener);\n      }\n    }\n\n    // Call the listeners\n    listeners.forEach((listener) => {\n      if (typeof listener === 'function') {\n        listener.call(this._eventContext, event);\n      } else {\n        listener.handleEvent();\n      }\n    });\n    return true;\n  }\n}\n\n/**\n * XMLHttpRequest events\n */\nEventTarget.events = [\n  'loadstart',\n  'progress',\n  'abort',\n  'error',\n  'load',\n  'timeout',\n  'loadend',\n];\n\nmodule.exports = EventTarget;\n","'use strict';\n\n/**\n * HTTP header container\n */\nclass HeadersContainer {\n  /**\n   * @param {object} headers initial headers\n   */\n  constructor(headers) {\n    this._headers = new Map();\n    if (headers && headers instanceof Object) {\n      Object.keys(headers).forEach((key) => {\n        this.addHeader(key, headers[key]);\n      });\n    }\n  }\n\n  /**\n   * Reset the container to its empty state.\n   */\n  reset() {\n    this._headers.clear();\n  }\n\n  /**\n   * Get header value. Header names are case-insensitive.\n   *\n   * @param  {string} name header name\n   * @returns {string|null} header value or null\n   */\n  getHeader(name) {\n    const value = this._headers.get(name.toLowerCase());\n    return value !== undefined ? value : null;\n  }\n\n  /**\n   * Get all headers as a string. Each header is on its own line.\n   *\n   * @returns {string} concatenated headers\n   */\n  getAll() {\n    // Sort the header names. It's not mandated by RFC 7230 but it makes assertion testing easier\n    // and, most importantly, it is required by getAllResponseHeaders() of XMLHttpRequest.\n    // See https://xhr.spec.whatwg.org/#the-getallresponseheaders()-method\n    const headerNames = [...this._headers.keys()].sort();\n\n    // Combine the header values\n    const headers = headerNames.reduce((result, name) => {\n      const headerValue = this._headers.get(name);\n      return `${result}${name}: ${headerValue}\\r\\n`;\n    }, '');\n    return headers;\n  }\n\n  /**\n   * Get all headers as an object.\n   *\n   * @returns {object} headers\n   */\n  getHash() {\n    const headers = {};\n    this._headers.forEach((value, name) => {\n      headers[name] = value;\n    });\n    return headers;\n  }\n\n  /**\n   * Add a header value, combining it with any previous value for the same header name.\n   *\n   * @param {string} name header name\n   * @param {string} value header value\n   */\n  addHeader(name, value) {\n    name = name.toLowerCase();\n    const currentValue = this._headers.get(name);\n    if (currentValue) {\n      value = `${currentValue}, ${value}`;\n    }\n    this._headers.set(name, value);\n  }\n}\n\nmodule.exports = HeadersContainer;\n","'use strict';\n\n// Disallowed request headers for setRequestHeader()\nconst forbiddenHeaders = [\n  'Accept-Charset',\n  'Accept-Encoding',\n  'Access-Control-Request-Headers',\n  'Access-Control-Request-Method',\n  'Connection',\n  'Content-Length',\n  'Cookie',\n  'Cookie2',\n  'Date',\n  'DNT',\n  'Expect',\n  'Host',\n  'Keep-Alive',\n  'Origin',\n  'Referer',\n  'TE',\n  'Trailer',\n  'Transfer-Encoding',\n  'Upgrade',\n  'Via',\n];\nconst forbiddenHeaderRegEx = new RegExp(`^(${forbiddenHeaders.join('|')}|Proxy-.*|Sec-.*)$`, 'i');\n\n/**\n * See https://fetch.spec.whatwg.org/#forbidden-header-name\n *\n * @param {string} name header name\n * @returns {boolean} whether the request header name is forbidden for XMLHttpRequest\n */\nfunction isRequestHeaderForbidden(name) {\n  return forbiddenHeaderRegEx.test(name);\n}\n\n/**\n * See https://fetch.spec.whatwg.org/#forbidden-method\n *\n * @param {string} name method name\n * @returns {boolean} whether the request method is forbidden for XMLHttpRequest\n */\nfunction isRequestMethodForbidden(method) {\n  return /^(CONNECT|TRACE|TRACK)$/i.test(method);\n}\n\n// Normalize method names as described in open()\n// https://xhr.spec.whatwg.org/#the-open()-method\nconst upperCaseMethods = [\n  'DELETE',\n  'GET',\n  'HEAD',\n  'OPTIONS',\n  'POST',\n  'PUT',\n];\nconst upperCaseMethodsRegEx = new RegExp(`^(${upperCaseMethods.join('|')})$`, 'i');\n\n/**\n * See https://fetch.spec.whatwg.org/#concept-method-normalize\n *\n * @param {string} method HTTP method name\n * @returns {string} normalized method name\n */\nfunction normalizeHTTPMethodName(method) {\n  if (upperCaseMethodsRegEx.test(method)) {\n    method = method.toUpperCase();\n  }\n  return method;\n}\n\n// Status code reason phrases from RFC 7231 §6.1, RFC 4918, RFC 5842, RFC 6585 and RFC 7538\nconst statusTexts = {\n  100: 'Continue',\n  101: 'Switching Protocols',\n  200: 'OK',\n  201: 'Created',\n  202: 'Accepted',\n  203: 'Non-Authoritative Information',\n  204: 'No Content',\n  205: 'Reset Content',\n  206: 'Partial Content', // RFC 7233\n  207: 'Multi-Status', // RFC 4918\n  208: 'Already Reported', // RFC 5842\n  300: 'Multiple Choices',\n  301: 'Moved Permanently',\n  302: 'Found',\n  303: 'See Other',\n  304: 'Not Modified', // RFC 7232\n  305: 'Use Proxy',\n  307: 'Temporary Redirect',\n  308: 'Permanent Redirect', // RFC 7538\n  400: 'Bad Request',\n  401: 'Unauthorized', // RFC 7235\n  402: 'Payment Required',\n  403: 'Forbidden',\n  404: 'Not Found',\n  405: 'Method Not Allowed',\n  406: 'Not Acceptable',\n  407: 'Proxy Authentication Required', // RFC 7235\n  408: 'Request Timeout',\n  409: 'Conflict',\n  410: 'Gone',\n  411: 'Length Required',\n  412: 'Precondition Failed', // RFC 7232\n  413: 'Payload Too Large',\n  414: 'URI Too Long',\n  415: 'Unsupported Media Type',\n  416: 'Range Not Satisfiable', // RFC 7233\n  417: 'Expectation Failed',\n  422: 'Unprocessable Entity', // RFC 4918\n  423: 'Locked', // RFC 4918\n  424: 'Failed Dependency', // RFC 4918\n  426: 'Upgrade Required',\n  428: 'Precondition Required', // RFC 6585\n  429: 'Too Many Requests', // RFC 6585\n  431: 'Request Header Fields Too Large', // RFC 6585\n  500: 'Internal Server Error',\n  501: 'Not Implemented',\n  502: 'Bad Gateway',\n  503: 'Service Unavailable',\n  504: 'Gateway Timeout',\n  505: 'HTTP Version Not Supported',\n  507: 'Insufficient Storage', // RFC 4918\n  511: 'Network Authentication Required', // RFC 6585\n};\n\n/**\n * @param {number} status HTTP status code\n * @returns {string} status text\n */\nfunction getStatusText(status) {\n  return statusTexts[status] || 'Unknown Status';\n}\n\nmodule.exports = {\n  getStatusText,\n  isRequestHeaderForbidden,\n  isRequestMethodForbidden,\n  normalizeHTTPMethodName,\n};\n","'use strict';\n\nconst Event = require('./Event');\nconst EventTarget = require('./EventTarget');\nconst HeadersContainer = require('./HeadersContainer');\nconst Utils = require('./Utils');\n\nfunction throwError(type, text = '') {\n  const exception = new Error(text);\n  exception.name = type;\n  throw exception;\n}\n\n/**\n * XMLHttpRequest mock for testing.\n * Based on https://xhr.spec.whatwg.org version '28 November 2018'.\n *\n * Supports:\n *  - events and states\n *  - open(), setRequestHeader(), send() and abort()\n *  - upload and download progress events\n *  - response status, statusText, headers and body\n *  - the timeout attribute (can be disabled) (since v4.0.0)\n *  - simulating a network error\n *  - simulating a request timeout (see MockXhr.setRequestTimeout())\n *\n * Partial support:\n *  - overrideMimeType(): throws when required, but has no other effect.\n *  - responseType: '', 'text' and 'json' are fully supported. Other responseType values can also be\n *    used, but they will return the response body given to setResponseBody() as-is in xhr.response.\n *  - responseXml: the response body is not converted to a document response. To get a document\n *    response, use it directly as the response body in setResponseBody().\n *\n * Not supported:\n * - synchronous requests (i.e. async == false)\n * - parsing the url and setting the username and password since there are no actual HTTP requests\n * - responseUrl (i.e. the final request url with redirects) is not automatically set. This can be\n *   emulated in a request handler.\n */\nclass MockXhr extends EventTarget {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super();\n    this._readyState = MockXhr.UNSENT;\n    this.requestHeaders = new HeadersContainer();\n    this._withCredentials = false;\n    this._timeout = 0;\n    this._upload = new EventTarget(this);\n    this._response = this._networkErrorResponse();\n\n    // Per-instance flag to enable the effects of the timeout attribute\n    this.timeoutEnabled = true;\n\n    // Hook for XMLHttpRequest creation\n    if (typeof MockXhr.onCreate === 'function') {\n      MockXhr.onCreate(this);\n    }\n  }\n\n  ////////////\n  // States //\n  ////////////\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-readystate\n   *\n   * @returns {number} readystate attribute\n   */\n  get readyState() {\n    return this._readyState;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {*} value ignored value\n   * @returns {*} value\n   */\n  set readyState(value) { return value; }\n\n  /////////////\n  // Request //\n  /////////////\n\n  /**\n   * Set the request method and url.\n   * https://xhr.spec.whatwg.org/#the-open()-method\n   *\n   * @param {string} method request HTTP method (GET, POST, etc.)\n   * @param {string} url request url\n   * @param {boolean} async async request flag (only true is supported)\n   */\n  open(method, url, async = true) {\n    if (!async) {\n      throw new Error('async = false is not supported.');\n    }\n    if (Utils.isRequestMethodForbidden(method)) {\n      throwError('SecurityError', `Method \"${method}\" forbidden.`);\n    }\n    method = Utils.normalizeHTTPMethodName(method);\n    // Skip parsing the url and setting the username and password\n\n    this._terminateRequest();\n\n    // Set variables\n    this._sendFlag = false;\n    this._uploadListenerFlag = false;\n    this.method = method;\n    this.url = url;\n    this.requestHeaders.reset();\n    this._response = this._networkErrorResponse();\n    if (this._readyState !== MockXhr.OPENED) {\n      this._readyState = MockXhr.OPENED;\n      this._fireReadyStateChange();\n    }\n  }\n\n  /**\n   * Add a request header value.\n   * https://xhr.spec.whatwg.org/#the-setrequestheader()-method\n   *\n   * @param {string} name header name\n   * @param {string} value header value\n   */\n  setRequestHeader(name, value) {\n    if (this._readyState !== MockXhr.OPENED || this._sendFlag) {\n      throwError('InvalidStateError');\n    }\n    if (typeof name !== 'string' || typeof value !== 'string') {\n      throw new SyntaxError();\n    }\n\n    if (!Utils.isRequestHeaderForbidden(name)) {\n      // Normalize value\n      value = value.trim();\n      this.requestHeaders.addHeader(name, value);\n    }\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-timeout\n   *\n   * @returns {number} timeout attribute\n   */\n  get timeout() {\n    return this._timeout;\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-timeout\n   *\n   * @param {number} value timeout value\n   */\n  set timeout(value) {\n    // Since this library is meant to run on node, skip the step involving the Window object.\n    this._timeout = value;\n    if (this._sendFlag && this.timeoutEnabled && this.constructor.timeoutEnabled) {\n      // A fetch is active so schedule a request timeout\n      this._scheduleRequestTimeout();\n    }\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-withcredentials\n   *\n   * @returns {EventTarget} withCredentials attribute\n   */\n  get withCredentials() {\n    return this._withCredentials;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {boolean} value withCredentials value\n   */\n  set withCredentials(value) {\n    if ((this._readyState !== MockXhr.UNSENT && this._readyState !== MockXhr.OPENED)\n      || this._sendFlag) {\n      throwError('InvalidStateError');\n    }\n    this._withCredentials = !!value;\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#the-upload-attribute\n   *\n   * @returns {EventTarget} upload attribute\n   */\n  get upload() {\n    return this._upload;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {*} value ignored value\n   * @returns {*} value\n   */\n  set upload(value) { return value; }\n\n  /**\n   * Initiate the request.\n   * https://xhr.spec.whatwg.org/#the-send()-method\n   *\n   * @param {*} body request body\n   */\n  send(body = null) {\n    if (this._readyState !== MockXhr.OPENED || this._sendFlag) {\n      throwError('InvalidStateError');\n    }\n    if (this.method === 'GET' || this.method === 'HEAD') {\n      body = null;\n    }\n\n    if (body !== null) {\n      let extractedContentType = null;\n\n      // Document body type not supported\n\n      // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n      {\n        let contentType = null;\n        if (typeof body === 'string') {\n          contentType = 'text/plain;charset=UTF-8';\n        } else if (body.type) {\n          // As specified for Blob\n          contentType = body.type;\n        }\n\n        // BufferSource, FormData, etc. not handled specially\n        extractedContentType = contentType;\n      }\n\n      /*\n      * Skipping step \"4. If author request headers contains `Content-Type`, then:\"\n      * Parsing mime type strings and overriding the charset to UTF-8 seems like a lot of work\n      * for little gain. If I'm wrong, please open an issue or better yet a pull request.\n      */\n\n      if (this.requestHeaders.getHeader('Content-Type') === null && extractedContentType !== null) {\n        this.requestHeaders.addHeader('Content-Type', extractedContentType);\n      }\n    }\n\n    this._uploadListenerFlag = this._upload.hasListeners();\n    this.body = body;\n    this._uploadCompleteFlag = this.body === null;\n    this._timedOutFlag = false;\n    this._sendFlag = true;\n\n    this._fireEvent('loadstart', 0, 0);\n    if (!this._uploadCompleteFlag && this._uploadListenerFlag) {\n      this._fireUploadEvent('loadstart', 0, this._getRequestBodySize());\n    }\n\n    // Other interactions are done through the mock's response methods\n    if (this._readyState !== MockXhr.OPENED || !this._sendFlag) {\n      return;\n    }\n\n    this._timeoutReference = Date.now();\n    this._scheduleRequestTimeout();\n\n    // Hook for XMLHttpRequest.send(). Execute in an empty callstack\n    if (typeof this.onSend === 'function') {\n      // Save the callback in case it changes before it has a chance to run\n      const { onSend } = this;\n      setTimeout(() => onSend.call(this, this), 0);\n    }\n    if (typeof MockXhr.onSend === 'function') {\n      // Save the callback in case it changes before it has a chance to run\n      const { onSend } = MockXhr;\n      setTimeout(() => onSend.call(this, this), 0);\n    }\n  }\n\n  /**\n   * Abort the request.\n   * https://xhr.spec.whatwg.org/#the-abort()-method\n   */\n  abort() {\n    this._terminateRequest();\n\n    if ((this._readyState === MockXhr.OPENED && this._sendFlag)\n      || this._readyState === MockXhr.HEADERS_RECEIVED\n      || this._readyState === MockXhr.LOADING) {\n      this._requestErrorSteps('abort');\n    }\n\n    if (this._readyState === MockXhr.DONE) {\n      // No readystatechange event is dispatched.\n      this._readyState = MockXhr.UNSENT;\n      this._response = this._networkErrorResponse();\n    }\n  }\n\n  //////////////\n  // Response //\n  //////////////\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-status\n   *\n   * @returns {number} status attribute\n   */\n  get status() {\n    return this._response.status;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {*} value ignored value\n   * @returns {*} value\n   */\n  set status(value) { return value; }\n\n  /**\n   * https://xhr.spec.whatwg.org/#the-statustext-attribute\n   *\n   * @returns {string} statusText attribute\n   */\n  get statusText() {\n    return this._response.statusMessage;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {*} value ignored value\n   * @returns {*} value\n   */\n  set statusText(value) { return value; }\n\n  /**\n   * Get a response header value.\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-getresponseheader\n   *\n   * @param {string} name header name\n   * @returns {string} header value\n   */\n  getResponseHeader(name) {\n    return this._response.headers.getHeader(name);\n  }\n\n  /**\n   * Get all response headers as a string.\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-getallresponseheaders\n   *\n   * @returns {string} concatenated headers\n   */\n  getAllResponseHeaders() {\n    return this._response.headers.getAll();\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-overridemimetype\n   *\n   * @param {string} mime MIME type\n   */\n  overrideMimeType(/* mime */) {\n    if (this._readyState === MockXhr.LOADING || this._readyState === MockXhr.DONE) {\n      throwError('InvalidStateError');\n    }\n    // noop\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype\n   *\n   * @returns {string} responseType attribute\n   */\n  get responseType() {\n    return this._responseType || '';\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsetype\n   *\n   * @param {string} value responseType value\n   */\n  set responseType(value) {\n    // Since this library is meant to run on node, skip the steps involving the Window object.\n    if (this._readyState === MockXhr.LOADING || this._readyState === MockXhr.DONE) {\n      throwError('InvalidStateError');\n    }\n\n    // The spec doesn't mandate throwing anything on invalid values since values must be of type\n    // XMLHttpRequestResponseType. Observed browser behavior is to ignore invalid values.\n    const responseTypes = ['', 'arraybuffer', 'blob', 'document', 'json', 'text'];\n    if (responseTypes.includes(value)) {\n      this._responseType = value;\n    }\n  }\n\n  /**\n   * https://xhr.spec.whatwg.org/#the-response-attribute\n   *\n   * @returns {*} response\n   */\n  get response() {\n    if (this.responseType === '' || this.responseType === 'text') {\n      if (this._readyState !== MockXhr.LOADING && this._readyState !== MockXhr.DONE) {\n        return '';\n      }\n\n      // No support for charset decoding as outlined in https://xhr.spec.whatwg.org/#text-response\n      return this._response.body === null ? '' : this._response.body;\n    }\n\n    if (this._readyState !== MockXhr.DONE) {\n      return null;\n    }\n\n    if (this.responseType === 'json') {\n      if (this._response.body === null) {\n        return null;\n      }\n      try {\n        return JSON.parse(this._response.body);\n      } catch (e) {\n        return null;\n      }\n    }\n\n    // Other responseTypes are sent as-is. They can be given directly by setResponseBody() anyway.\n    return this._response.body;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {*} value ignored value\n   * @returns {*} value\n   */\n  set response(value) { return value; }\n\n  /**\n   * https://xhr.spec.whatwg.org/#the-responsetext-attribute\n   *\n   * @returns {string} responseText attribute\n   */\n  get responseText() {\n    if (this.responseType !== '' && this.responseType !== 'text') {\n      throwError('InvalidStateError');\n    }\n    if (this._readyState !== MockXhr.LOADING && this._readyState !== MockXhr.DONE) {\n      return '';\n    }\n\n    // No support for charset decoding as outlined in https://xhr.spec.whatwg.org/#text-response\n    return this._response.body === null ? '' : this._response.body;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {*} value ignored value\n   * @returns {*} value\n   */\n  set responseText(value) { return value; }\n\n  /**\n   * https://xhr.spec.whatwg.org/#dom-xmlhttprequest-responsexml\n   *\n   * @returns {*} responseXML attribute\n   */\n  get responseXML() {\n    if (this.responseType !== '' && this.responseType !== 'document') {\n      throwError('InvalidStateError');\n    }\n    if (this._readyState !== MockXhr.DONE) {\n      return null;\n    }\n\n    // Since this library is meant to run on node, there is no support for charset decoding as\n    // outlined in https://xhr.spec.whatwg.org/#text-response\n    // If needed, a document response can be given to setResponseBody() to be returned here.\n    return this._response.body === null ? '' : this._response.body;\n  }\n\n  /**\n   * noop setter\n   *\n   * @param {*} value ignored value\n   * @returns {*} value\n   */\n  set responseXML(value) { return value; }\n\n  ///////////////////////////\n  // Mock response methods //\n  ///////////////////////////\n\n  /**\n   * Fire a request upload progress event.\n   *\n   * @param {number} transmitted bytes transmitted\n   */\n  uploadProgress(transmitted) {\n    if (!this._sendFlag || this._uploadCompleteFlag) {\n      throw new Error('Mock usage error detected.');\n    }\n    if (this._uploadListenerFlag) {\n      // If no listeners were registered before send(), no upload events should be fired.\n      this._fireUploadEvent('progress', transmitted, this._getRequestBodySize());\n    }\n  }\n\n  /**\n   * Complete response method. Sets the response headers and body. Will set the\n   * state to DONE.\n   *\n   * @param {number} status response http status (default 200)\n   * @param {?object} headers name-value headers (optional)\n   * @param {?*} body response body (default null)\n   * @param {?string} statusText response http status text (optional)\n   */\n  respond(status, headers, body, statusText) {\n    this.setResponseHeaders(status, headers, statusText);\n    this.setResponseBody(body);\n  }\n\n  /**\n   * Set only the response headers. Will change the state to HEADERS_RECEIVED.\n   *\n   * @param {number} status response http status (default 200)\n   * @param {?object} headers name-value headers (optional)\n   * @param {?string} statusText response http status text (optional)\n   */\n  setResponseHeaders(status, headers, statusText) {\n    if (this._readyState !== MockXhr.OPENED || !this._sendFlag) {\n      throw new Error('Mock usage error detected.');\n    }\n    if (this.body) {\n      this._requestEndOfBody();\n    }\n    status = typeof status === 'number' ? status : 200;\n    const statusMessage = statusText !== undefined ? statusText : Utils.getStatusText(status);\n    this._processResponse({\n      status,\n      statusMessage,\n      headers: new HeadersContainer(headers),\n    });\n  }\n\n  /**\n   * Fire a response progress event. Will set the state to LOADING.\n   *\n   * @param {number} transmitted transmitted bytes\n   * @param {number} length total bytes\n   */\n  downloadProgress(transmitted, length) {\n    if (this._readyState !== MockXhr.HEADERS_RECEIVED\n      && this._readyState !== MockXhr.LOADING) {\n      throw new Error('Mock usage error detected.');\n    }\n\n    // Useless condition but follows the spec's wording\n    if (this._readyState === MockXhr.HEADERS_RECEIVED) {\n      this._readyState = MockXhr.LOADING;\n    }\n\n    // As stated in https://xhr.spec.whatwg.org/#the-send()-method\n    // Web compatibility is the reason readystatechange fires more often than\n    // state changes.\n    this._fireReadyStateChange();\n    this._fireEvent('progress', transmitted, length);\n  }\n\n  /**\n   * Set the response body. Will set the state to DONE.\n   *\n   * @param {?*} body response body (default null)\n   */\n  setResponseBody(body = null) {\n    if (!this._sendFlag\n      || (this._readyState !== MockXhr.OPENED\n        && this._readyState !== MockXhr.HEADERS_RECEIVED\n        && this._readyState !== MockXhr.LOADING)) {\n      throw new Error('Mock usage error detected.');\n    }\n    if (this._readyState === MockXhr.OPENED) {\n      // Default \"200 - OK\" response headers\n      this.setResponseHeaders();\n    }\n\n    // As stated in https://xhr.spec.whatwg.org/#the-send()-method\n    // Web compatibility is the reason readystatechange fires more often than\n    // state changes.\n    this._readyState = MockXhr.LOADING;\n    this._fireReadyStateChange();\n\n    this._response.body = body !== undefined ? body : null;\n    this._handleResponseEndOfBody();\n  }\n\n  /**\n   * Simulate a network error. Will set the state to DONE.\n   */\n  setNetworkError() {\n    if (!this._sendFlag) {\n      throw new Error('Mock usage error detected.');\n    }\n    this._processResponse(this._networkErrorResponse());\n  }\n\n  /**\n   * Simulate a request timeout. Will set the state to DONE.\n   */\n  setRequestTimeout() {\n    if (!this._sendFlag) {\n      throw new Error('Mock usage error detected.');\n    }\n    this._terminateRequest();\n    this._timedOutFlag = true;\n    this._processResponse(this._networkErrorResponse());\n  }\n\n  ///////////////////////////////////\n  // Request and response handling //\n  ///////////////////////////////////\n\n  /**\n   * Note: the \"process request body\" task is in the MockXhr response methods\n   * Process request end-of-body task. When the whole request is sent.\n   * https://xhr.spec.whatwg.org/#the-send()-method\n   */\n  _requestEndOfBody() {\n    this._uploadCompleteFlag = true;\n\n    if (this._uploadListenerFlag) {\n      // If no listeners were registered before send(), these steps do not run.\n      const length = this._getRequestBodySize();\n      const transmitted = length;\n      this._fireUploadEvent('progress', transmitted, length);\n      this._fireUploadEvent('load', transmitted, length);\n      this._fireUploadEvent('loadend', transmitted, length);\n    }\n  }\n\n  /**\n   * Process response task. When the response headers are received.\n   * https://xhr.spec.whatwg.org/#the-send()-method\n   *\n   * @param {*} response response\n   */\n  _processResponse(response) {\n    this._response = response;\n    this._handleResponseErrors();\n    if (this._isNetworkErrorResponse()) {\n      return;\n    }\n    this._readyState = MockXhr.HEADERS_RECEIVED;\n    this._fireReadyStateChange();\n    if (this._readyState !== MockXhr.HEADERS_RECEIVED) {\n      return;\n    }\n    if (this._response.body === null) {\n      this._handleResponseEndOfBody();\n    }\n    // Further steps are triggered by the MockXhr response methods\n  }\n\n  /**\n   * Handle response end-of-body for response.\n   * https://xhr.spec.whatwg.org/#handle-response-end-of-body\n   */\n  _handleResponseEndOfBody() {\n    this._handleResponseErrors();\n    if (this._isNetworkErrorResponse()) {\n      return;\n    }\n    const length = this._response.body ? this._response.body.length : 0;\n    this._fireEvent('progress', length, length);\n    this._readyState = MockXhr.DONE;\n    this._sendFlag = false;\n    this._fireReadyStateChange();\n    this._fireEvent('load', length, length);\n    this._fireEvent('loadend', length, length);\n  }\n\n  /**\n   * Handle errors for response.\n   * https://xhr.spec.whatwg.org/#handle-errors\n   */\n  _handleResponseErrors() {\n    if (!this._sendFlag) {\n      return;\n    }\n    if (this._timedOutFlag) {\n      // Timeout\n      this._requestErrorSteps('timeout');\n    } else if (this._isNetworkErrorResponse()) {\n      // Network error\n      this._requestErrorSteps('error');\n    }\n  }\n\n  /**\n   * The request error steps for event 'event'.\n   * https://xhr.spec.whatwg.org/#request-error-steps\n   *\n   * @param {string} event event name\n   */\n  _requestErrorSteps(event) {\n    this._readyState = MockXhr.DONE;\n    this._sendFlag = false;\n    this._response = this._networkErrorResponse();\n    this._fireReadyStateChange();\n    if (!this._uploadCompleteFlag) {\n      this._uploadCompleteFlag = true;\n\n      if (this._uploadListenerFlag) {\n        // If no listeners were registered before send(), no upload events should be fired.\n        this._fireUploadEvent(event, 0, 0);\n        this._fireUploadEvent('loadend', 0, 0);\n      }\n    }\n    this._fireEvent(event, 0, 0);\n    this._fireEvent('loadend', 0, 0);\n  }\n\n  ///////////////\n  // Internals //\n  ///////////////\n\n  /**\n   * @returns {object} new network error response object\n   */\n  _networkErrorResponse() {\n    return {\n      type: 'error',\n      status: 0,\n      statusMessage: '',\n      headers: new HeadersContainer(),\n      body: null,\n    };\n  }\n\n  _isNetworkErrorResponse() {\n    return this._response.type === 'error';\n  }\n\n  _terminateRequest() {\n    delete this.method;\n    delete this.url;\n  }\n\n  _getRequestBodySize() {\n    if (!this.body) {\n      return 0;\n    }\n    return this.body.size ? this.body.size : this.body.length;\n  }\n\n  _newEvent(name, transmitted, length) {\n    return new Event(name, transmitted, length);\n  }\n\n  _fireEvent(name, transmitted, length) {\n    this.dispatchEvent(this._newEvent(name, transmitted, length));\n  }\n\n  _fireUploadEvent(name, transmitted, length) {\n    this._upload.dispatchEvent(this._newEvent(name, transmitted, length));\n  }\n\n  _fireReadyStateChange() {\n    const event = new Event('readystatechange');\n    if (this.onreadystatechange) {\n      this.onreadystatechange(event);\n    }\n    this.dispatchEvent(event);\n  }\n\n  _scheduleRequestTimeout() {\n    // Cancel any previous timeout task\n    if (this._timeoutTask) {\n      clearTimeout(this._timeoutTask);\n    }\n\n    if (this._timeout > 0) {\n      // The timeout delay must be measured relative to the start of fetching\n      // https://xhr.spec.whatwg.org/#the-timeout-attribute\n      const delay = Math.max(0, this._timeout - (Date.now() - this._timeoutReference));\n      this._timeoutTask = setTimeout(() => {\n        if (this._sendFlag) {\n          this.setRequestTimeout();\n        }\n        delete this._timeoutTask;\n      }, delay);\n    }\n  }\n}\n\n// Global flag to enable the effects of the timeout attribute\nMockXhr.timeoutEnabled = true;\n\n/**\n * The client states\n * https://xhr.spec.whatwg.org/#states\n */\nMockXhr.UNSENT = 0;\nMockXhr.OPENED = 1;\nMockXhr.HEADERS_RECEIVED = 2;\nMockXhr.LOADING = 3;\nMockXhr.DONE = 4;\n\nmodule.exports = MockXhr;\n","'use strict';\n\nconst Utils = require('./Utils');\n\n/**\n * Mock server for responding to XMLHttpRequest mocks from the class MockXhr. Provides simple route\n * matching and request handlers to make test harness creation easier.\n */\nclass MockXhrServer {\n  /**\n   * Constructor\n   *\n   * @param {MockXhr} xhrMock XMLHttpRequest mock class\n   * @param {?object} routes routes\n   */\n  constructor(xhrMock, routes = {}) {\n    this.MockXhr = xhrMock;\n    this._requests = [];\n    this._routes = {};\n    Object.keys(routes).forEach((method) => {\n      const [matcher, handler] = routes[method];\n      this.addHandler(method, matcher, handler);\n    });\n    xhrMock.onSend = (xhr) => { this._handleRequest(xhr); };\n\n    // Setup a mock request factory for users\n    this.xhrMock = xhrMock; // For backwards compatibility with < 4.1.0\n    this.xhrFactory = () => new this.MockXhr();\n  }\n\n  /**\n   * Install the server's XMLHttpRequest mock in the context. Revert with remove().\n   *\n   * @param {object} context context object (e.g. global, window)\n   * @returns {MockXhrServer} this\n   */\n  install(context = global) {\n    this._savedXMLHttpRequest = context.XMLHttpRequest;\n    this._savedContext = context;\n    context.XMLHttpRequest = this.MockXhr;\n    return this;\n  }\n\n  /**\n   * Remove the server as the global XMLHttpRequest mock. Reverts the actions of install(global).\n   */\n  remove() {\n    if (!this._savedContext) {\n      throw new Error('remove() called without matching install(global).');\n    }\n\n    if (this._savedXMLHttpRequest !== undefined) {\n      this._savedContext.XMLHttpRequest = this._savedXMLHttpRequest;\n      delete this._savedXMLHttpRequest;\n    } else {\n      delete this._savedContext.XMLHttpRequest;\n    }\n    delete this._savedContext;\n  }\n\n  /**\n   * Disable the effects of the timeout attribute on the XMLHttpRequest mock used by the server.\n   */\n  disableTimeout() {\n    this.MockXhr.timeoutEnabled = false;\n  }\n\n  /**\n   * Enable the effects of the timeout attribute on the XMLHttpRequest mock used by the server.\n   */\n  enableTimeout() {\n    this.MockXhr.timeoutEnabled = true;\n  }\n\n  /**\n   * Add a GET request handler.\n   *\n   * @param {string|RegExp|Function} matcher url matcher\n   * @param {object|Function|object[]|Function[]} handler request handler\n   * @returns {MockXhrServer} this\n   */\n  get(matcher, handler) {\n    return this.addHandler('GET', matcher, handler);\n  }\n\n  /**\n   * Add a POST request handler.\n   *\n   * @param {string|RegExp|Function} matcher url matcher\n   * @param {object|Function|object[]|Function[]} handler request handler\n   * @returns {MockXhrServer} this\n   */\n  post(matcher, handler) {\n    return this.addHandler('POST', matcher, handler);\n  }\n\n  /**\n   * Add a PUT request handler.\n   *\n   * @param {string|RegExp|Function} matcher url matcher\n   * @param {object|Function|object[]|Function[]} handler request handler\n   * @returns {MockXhrServer} this\n   */\n  put(matcher, handler) {\n    return this.addHandler('PUT', matcher, handler);\n  }\n\n  /**\n   * Add a DELETE request handler.\n   *\n   * @param {string|RegExp|Function} matcher url matcher\n   * @param {object|Function|object[]|Function[]} handler request handler\n   * @returns {MockXhrServer} this\n   */\n  delete(matcher, handler) {\n    return this.addHandler('DELETE', matcher, handler);\n  }\n\n  /**\n   * Add a request handler.\n   *\n   * @param {string} method HTTP method\n   * @param {string|RegExp|Function} matcher url matcher\n   * @param {object|Function|object[]|Function[]} handler request handler\n   * @returns {MockXhrServer} this\n   */\n  addHandler(method, matcher, handler) {\n    // Match the processing done in MockXHR for the method name\n    method = Utils.normalizeHTTPMethodName(method);\n\n    if (!this._routes[method]) {\n      this._routes[method] = [];\n    }\n    this._routes[method].push({\n      matcher,\n      handler,\n      count: 0,\n    });\n    return this;\n  }\n\n  /**\n   * Set the default request handler for requests that don't match any route.\n   *\n   * @param {object|Function|object[]|Function[]} handler request handler\n   * @returns {MockXhrServer} this\n   */\n  setDefaultHandler(handler) {\n    this._defaultRoute = {\n      handler,\n      count: 0,\n    };\n    return this;\n  }\n\n  /**\n   * Return 404 responses for requests that don't match any route.\n   *\n   * @returns {MockXhrServer} this\n   */\n  setDefault404() {\n    return this.setDefaultHandler({ status: 404 });\n  }\n\n  /**\n   * @returns {object[]} list of requests received by the server. Entries: { method, url }\n   */\n  getRequestLog() {\n    return this._requests;\n  }\n\n  _handleRequest(xhr) {\n    // Record the request for easier debugging\n    this._requests.push({\n      method: xhr.method,\n      url: xhr.url,\n      headers: xhr.requestHeaders.getHash(),\n      body: xhr.body,\n    });\n\n    const route = this._findFirstMatchingRoute(xhr) || this._defaultRoute;\n    if (route) {\n      // Routes can have arrays of handlers. Each one is used once and the last one is used if out\n      // of elements.\n      let { handler } = route;\n      if (Array.isArray(handler)) {\n        handler = handler[Math.min(handler.length - 1, route.count)];\n      }\n      route.count += 1;\n\n      if (typeof handler === 'function') {\n        handler(xhr);\n      } else {\n        xhr.respond(handler.status, handler.headers, handler.body, handler.statusText);\n      }\n    }\n  }\n\n  _findFirstMatchingRoute(xhr) {\n    const method = Utils.normalizeHTTPMethodName(xhr.method);\n    if (!this._routes[method]) {\n      return undefined;\n    }\n\n    const { url } = xhr;\n    return this._routes[method].find((route) => {\n      const { matcher } = route;\n      if (typeof matcher === 'function') {\n        return matcher(url);\n      } else if (matcher instanceof RegExp) {\n        return matcher.test(url);\n      }\n      return matcher === url;\n    });\n  }\n}\n\nmodule.exports = MockXhrServer;\n","'use strict';\n\nconst MockXhr = require('./MockXhr');\nconst MockXhrServer = require('./MockXhrServer');\n\n/**\n * Create a new \"local\" MockXhr subclass. This makes it easier to have self-contained unit tests\n * since \"global\" hooks can be registered directly on the subclass. These hooks don't need to then\n * be removed after tests because they are local to the new subclass.\n *\n * @returns {MockXhr} new MockXhr subclass\n */\nfunction newMockXhr() {\n  class LocalMockXhr extends MockXhr {\n    constructor() {\n      super();\n\n      // Call the local onCreate hook on the new mock instance\n      if (typeof LocalMockXhr.onCreate === 'function') {\n        LocalMockXhr.onCreate(this);\n      }\n    }\n\n    // Override the parent method to enable the local MockXhr instance's\n    // onSend() hook\n    send(...args) {\n      super.send(...args);\n\n      // Execute in an empty callstack\n      if (typeof LocalMockXhr.onSend === 'function') {\n        // Save the callback in case it changes before it has a chance to run\n        const { onSend } = LocalMockXhr;\n        setTimeout(() => onSend.call(this, this), 0);\n      }\n    }\n  }\n\n  // Override the parent class' flag to enable the effects of the timeout attribute\n  LocalMockXhr.timeoutEnabled = true;\n  return LocalMockXhr;\n}\n\n/**\n * Create a new mock server using MockXhr.\n *\n * @returns {MockXhrServer} new mock server\n */\nfunction newServer(routes) {\n  return new MockXhrServer(newMockXhr(), routes);\n}\n\nmodule.exports = {\n  newMockXhr,\n  newServer,\n};\n","'use strict';\n\nconst Factories = require('./src/Factories');\nconst MockXhr = require('./src/MockXhr');\nconst MockXhrServer = require('./src/MockXhrServer');\n\nmodule.exports = {\n  // Access to the request mock and server classes\n  MockXhr,\n  MockXhrServer,\n\n  // Factory methods\n  newMockXhr: Factories.newMockXhr,\n  newServer: Factories.newServer,\n};\n","const MockXMLHttpRequest = require('mock-xmlhttprequest');\n\nconst server = MockXMLHttpRequest.newServer({\n    get: ['/views', function (xhr) {\n        count = 0\n        if (typeof (Storage) !== \"undefined\") {\n            count = Number(localStorage.getItem(\"count\"))\n        } else {\n            alert('Sorry! No Web Storage support for this browser. This web page will not function properly')\n        }\n        xhr.respond(200, { 'Content-Type': 'application/json' }, `{ \"views\":  ${count}}`, \"OK\")\n    }],\n    post: ['/views', function (xhr) {\n        if (typeof (Storage) !== \"undefined\") {\n            count = Number(localStorage.getItem(\"count\"))\n            localStorage.setItem(\"count\", count+1);\n        } else {\n            alert('Sorry! No Web Storage support for this browser. This web page will not function properly')\n        }\n        xhr.respond(200, {}, null, \"OK\")\n    }]\n}).install()\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    updateViewsReq = new XMLHttpRequest();\n    updateViewsReq.open(\"POST\", \"/views\", true);\n    updateViewsReq.send();\n    updateViewsReq.onload = function () {\n        console.log(updateViewsReq)\n    }\n\n    getViewsReq = new XMLHttpRequest();\n    getViewsReq.open(\"GET\", \"/views\", true);\n    getViewsReq.send();\n    getViewsReq.onload = function () {\n        const json = JSON.parse(getViewsReq.responseText);\n        const views = json.views\n\n        document.getElementById(\"viewCount\").innerHTML = views\n        document.getElementById(\"message\").style.display = \"block\"\n    }\n})"]}